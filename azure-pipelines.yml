# Build pipeline for Ubuntu and Windows

trigger:
  tags:
    include:
    - v*
    
jobs:
- job: 'Ubuntu'
  pool:
    vmImage: 'ubuntu-18.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
  - task: CmdLine@2
    inputs:
      script: |
        python -m pip install --upgrade pip
        python -m pip install matplotlib
        python -m pip install PyQt5
        python -m pip install PyInstaller
  - task: CmdLine@2
    inputs:
      script: 'python -m PyInstaller ChronoPlotter.py --onefile -n ChronoPlotter'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/dist/ChronoPlotter'
      artifact: 'build-ubuntu'
      publishLocation: 'pipeline'
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'Github service connection'
      repositoryName: 'mncoppola/ChronoPlotter'
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Pipeline.Workspace)/s/dist/ChronoPlotter'
      assetUploadMode: 'replace'
      addChangeLog: false

- job: 'Windows'
  pool:
    vmImage: 'windows-latest'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
  - task: CmdLine@2
    inputs:
      script: |
        python -m pip install --upgrade pip
        python -m pip install matplotlib
        python -m pip install PyQt5
        python -m pip install PyInstaller
  - task: CmdLine@2
    inputs:
      script: 'python -m PyInstaller ChronoPlotter.py --onefile -w --icon=images\icon.ico -n ChronoPlotter'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)\s\dist\ChronoPlotter.exe'
      artifact: 'build-win'
      publishLocation: 'pipeline'
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'Github service connection'
      repositoryName: 'mncoppola/ChronoPlotter'
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Pipeline.Workspace)\s\dist\ChronoPlotter.exe'
      assetUploadMode: 'replace'
      addChangeLog: false

- job: 'MacOS'
  pool:
    vmImage: 'macos-latest'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.5'
      addToPath: true
  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'Certificates.p12'
      certPwd: '$(cert_password)'
      keychain: 'temp'
  - task: CmdLine@2
    inputs:
      script: |
        python -m pip install --upgrade pip
        python -m pip install matplotlib
        python -m pip install PyQt5
        python -m pip install PyInstaller
        npm install --global create-dmg
  - task: CmdLine@2
    inputs:
      script: 'python -m PyInstaller ChronoPlotter.py -w --icon=images\icon.icns -n ChronoPlotter --osx-bundle-identifier ChronoPlotter'
  - task: CmdLine@2
    inputs:
      script: |
        sed -e s/0.0.0/$(Build.SourceBranchName)/ -i "" Info.plist
        chmod +x MacOS/ChronoPlotter
        rm -rf MacOS/lib MacOS/include
        ln -s ../Resources/lib MacOS/lib
        ln -s ../Resources/include MacOS/include
        cp $(Pipeline.Workspace)/s/images/icon.icns Resources/imagesicon.icns
      workingDirectory: '$(Pipeline.Workspace)/s/dist/ChronoPlotter.app/Contents/'
  - task: CmdLine@2
    inputs:
      script: |
        codesign -v -s "$(developer_id)" --options=runtime --deep --entitlements $(Pipeline.Workspace)/s/entitlements.plist ChronoPlotter.app
      workingDirectory: '$(Pipeline.Workspace)/s/dist/'
  - task: CmdLine@2
    inputs:
      script: |
        create-dmg ChronoPlotter.app --identity="$(developer_id)"
        mv "ChronoPlotter $(Build.SourceBranchName).dmg" "ChronoPlotter.dmg"
      workingDirectory: '$(Pipeline.Workspace)/s/dist/'
  - task: CmdLine@2
    inputs:
      script: |
        RESULT=$(xcrun altool --notarize-app --primary-bundle-id ChronoPlotter -u "$(dev_username)" -p "$(dev_password)" --file "ChronoPlotter.dmg" --output-format xml)

        if [ $? -ne 0 ]; then
          echo "Submitting for notarization failed 1"
          echo "$RESULT"
          exit 1
        fi

        REQUEST_UUID=$(echo "$RESULT" | xpath "//key[normalize-space(text()) = 'RequestUUID']/following-sibling::string[1]/text()" 2> /dev/null)

        if [ -z "$REQUEST_UUID" ]; then
          echo "Submitting for notarization failed 2"
          echo "$RESULT"
          exit 1
        fi
        echo "$RESULT" | xpath "//key[normalize-space(text()) = 'success-message']/following-sibling::string[1]/text()" 2> /dev/null
        echo "Submitted notarization request $REQUEST_UUID, waiting for response..."

        TOTAL_SLEEP=0
        while true
        do
          sleep 20
          TOTAL_SLEEP=$((TOTAL_SLEEP + 20))
          RESULT=$(xcrun altool --notarization-info "$REQUEST_UUID" -u "$(dev_username)" -p "$(dev_password)" --output-format xml)
          STATUS=$(echo "$RESULT" | xpath "//key[normalize-space(text()) = 'Status']/following-sibling::string[1]/text()" 2> /dev/null)
          if [ "$STATUS" = "success" ]; then
            echo "Notarization succeeded, $TOTAL_SLEEP sec"
            break
          elif [ "$STATUS" = "in progress" ]; then
            echo "Notarization in progress, $TOTAL_SLEEP sec"
          else
            echo "Notarization failed"
            echo "$RESULT"
            exit 1
          fi
        done

        xcrun stapler staple "ChronoPlotter.dmg"
      workingDirectory: '$(Pipeline.Workspace)/s/dist/'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/s/dist/ChronoPlotter.dmg'
      artifact: 'build-macos'
      publishLocation: 'pipeline'
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'Github service connection'
      repositoryName: 'mncoppola/ChronoPlotter'
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Pipeline.Workspace)\s\dist\ChronoPlotter.dmg'
      assetUploadMode: 'replace'
      addChangeLog: false